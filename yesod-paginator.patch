diff --git a/Yesod/Paginator.hs b/Yesod/Paginator.hs
index a45ffe2..4c1defe 100644
--- a/Yesod/Paginator.hs
+++ b/Yesod/Paginator.hs
@@ -5,7 +5,7 @@
 -------------------------------------------------------------------------------
 -- |
 --
--- Inspiration from a concept by ajdunlap: 
+-- Inspiration from a concept by ajdunlap:
 --      <http://hackage.haskell.org/package/yesod-paginate>
 --
 -- But uses an entirely different approach.
@@ -50,8 +50,10 @@
 -------------------------------------------------------------------------------
 module Yesod.Paginator
     ( paginate
+    , paginateWith
     , selectPaginated
-    , paginationWidget
+    , selectPaginatedWith
+    , module Yesod.Paginator.Widget
     ) where
 
 import Yesod
@@ -59,22 +61,36 @@ import Yesod.Paginator.Widget
 import Control.Monad.Trans.Class (MonadTrans)
 
 paginate :: Int -> [a] -> GHandler s m ([a], GWidget s m ())
-paginate per items = do
+paginate = paginateWith defaultWidget
+
+paginateWith :: PageWidget s m -> Int -> [a] -> GHandler s m ([a], GWidget s m ())
+paginateWith widget per items = do
     p <- getCurrentPage
 
     let tot = length items
     let  xs = take per $ drop ((p - 1) * per) items
 
-    return (xs, paginationWidget p per tot)
+    return (xs, widget p per tot)
 
-selectPaginated :: ( MonadTrans (PersistEntityBackend v)
-                   , PersistEntity v
-                   , PersistQuery (PersistEntityBackend v) (GHandler s m))
-                => Int -> [Filter v] -> [SelectOpt v]
-                -> PersistEntityBackend v (GHandler s m) ([Entity v], GWidget s1 m1 ())
-selectPaginated per filters selectOpts = do
+selectPaginated :: (PersistEntity val,
+                    PersistQuery (PersistEntityBackend val) (GHandler s m),
+                    MonadTrans (PersistEntityBackend val)) =>
+                   Int
+                   -> [Filter val]
+                   -> [SelectOpt val]
+                   -> PersistEntityBackend val (GHandler s m) ([Entity val], GWidget s m ())
+selectPaginated = selectPaginatedWith defaultWidget
+selectPaginatedWith :: (PersistEntity val,
+                    PersistQuery (PersistEntityBackend val) (GHandler s m),
+                    MonadTrans (PersistEntityBackend val)) =>
+       PageWidget s m
+       -> Int
+       -> [Filter val]
+       -> [SelectOpt val]
+       -> PersistEntityBackend val (GHandler s m) ([Entity val], GWidget s m ())
+selectPaginatedWith widget per filters selectOpts = do
     p   <- lift getCurrentPage
     tot <- count filters
     xs  <- selectList filters (selectOpts ++ [OffsetBy ((p-1)*per), LimitTo per])
 
-    return (xs, paginationWidget p per tot)
+    return (xs, widget p per tot)
diff --git a/Yesod/Paginator/Widget.hs b/Yesod/Paginator/Widget.hs
index 11c2b38..8475647 100644
--- a/Yesod/Paginator/Widget.hs
+++ b/Yesod/Paginator/Widget.hs
@@ -1,27 +1,41 @@
+{-# LANGUAGE RecordWildCards #-}
 {-# LANGUAGE QuasiQuotes       #-}
 {-# LANGUAGE OverloadedStrings #-}
 module Yesod.Paginator.Widget
- ( getCurrentPage  
+ ( getCurrentPage
  , paginationWidget
+ , defaultWidget
+ , PageWidget
+ , PageWidgetConfig(..)
  ) where
 
-import Yesod
+import           Yesod
 
-import Control.Monad (when)
-import Data.Maybe    (fromMaybe)
-import Data.Text     (Text)
+import           Control.Monad (when)
+import           Data.Maybe    (fromMaybe)
+import           Data.Text (Text)
 import qualified Data.Text as T
 
+type PageWidget s m = Int -> Int -> Int -> GWidget s m ()
+
+data PageWidgetConfig = PageWidgetConfig {
+   prevText   :: Text    -- ^ The text for the 'previous page' link.
+ , nextText   :: Text    -- ^ The text for the 'next page' link.
+ , pagesCount :: Int -- ^ The number of page links to show
+ , ascending  :: Bool -- ^ Whether to list pages in ascending order.
+}
+
 -- | Individual links to pages need to follow strict (but sane) markup
 --   to be styled correctly by bootstrap. This type allows construction
 --   of such links in both enabled and disabled states.
-data PageLink = Enabled Int String String -- ^ page, content, class
-              | Disabled    String String -- ^ content, class
+data PageLink = Enabled Int Text Text -- ^ page, content, class
+              | Disabled    Text Text -- ^ content, class
+
 
 -- | Correctly show one of the constructed links
 showLink :: [(Text, Text)] -> PageLink -> GWidget s m ()
 showLink params (Enabled pg cnt cls) = do
-    let param = ("p", T.pack . show $ pg)
+    let param = ("p", showT pg)
 
     [whamlet|
         <li .#{cls}>
@@ -40,13 +54,16 @@ showLink _ (Disabled cnt cls) =
             <a>#{cnt}
         |]
 
+defaultWidget :: PageWidget s m
+defaultWidget = paginationWidget $ PageWidgetConfig { prevText = "«"
+                                                    , nextText = "»"
+                                                    , pagesCount = 9
+                                                    , ascending = True}
+
 -- | A widget showing pagination links. Follows bootstrap principles.
 --   Utilizes a \"p\" GET param but leaves all other GET params intact.
-paginationWidget :: Int -- ^ current page
-                 -> Int -- ^ items per page
-                 -> Int -- ^ total number of items
-                 -> GWidget s m ()
-paginationWidget page per tot = do
+paginationWidget :: PageWidgetConfig -> PageWidget s m
+paginationWidget (PageWidgetConfig {..}) page per tot = do
     -- total / per + 1 for any remainder
     let pages = (\(n, r) -> n + (min r 1)) $ tot `divMod` per
 
@@ -69,29 +86,27 @@ paginationWidget page per tot = do
                 next = [pg + 1 .. pgs   ]
 
                 -- these always appear
-                prevLink = [(if null prev then Disabled else Enabled (pg - 1)) "«" "prev"]
-                nextLink = [(if null next then Disabled else Enabled (pg + 1)) "»" "next"]
+                prevLink = [(if null prev then Disabled else Enabled (pg - 1)) prevText "prev"]
+                nextLink = [(if null next then Disabled else Enabled (pg + 1)) nextText "next"]
 
                 -- show first/last unless we're on it
                 firstLink = [ Enabled 1   "1"        "prev" | pg > 1   ]
-                lastLink  = [ Enabled pgs (show pgs) "next" | pg < pgs ]
-
-                lim = 9
+                lastLink  = [ Enabled pgs (showT pgs) "next" | pg < pgs ]
 
                 -- we'll show ellipsis if there are enough links that some will
                 -- be ommitted from the list
-                prevEllipsis = [ Disabled "..." "prev" | length prev > lim + 1 ]
-                nextEllipsis = [ Disabled "..." "next" | length next > lim + 1 ]
+                prevEllipsis = [ Disabled "..." "prev" | length prev > pagesCount + 1 ]
+                nextEllipsis = [ Disabled "..." "next" | length next > pagesCount + 1 ]
 
                 -- the middle lists, strip the first/last pages and
                 -- correctly take up to limit away from current
-                prevLinks = reverse . take lim . reverse . drop 1 $ map (\p -> Enabled p (show p) "prev") prev
-                nextLinks = take lim . reverse . drop 1 . reverse $ map (\p -> Enabled p (show p) "next") next
+                prevLinks = reverse . take pagesCount . reverse . drop 1 $ map (\p -> Enabled p (showT p) "prev") prev
+                nextLinks = take pagesCount . reverse . drop 1 . reverse $ map (\p -> Enabled p (showT p) "next") next
 
                 -- finally, this page itself
-                curLink = [Disabled (show pg) "active"]
+                curLink = [Disabled (showT pg) "active"]
 
-            in concat [ prevLink
+            in concat $ (if ascending then id else reverse) [ prevLink
                       , firstLink
                       , prevEllipsis
                       , prevLinks
@@ -110,3 +125,6 @@ getCurrentPage = fmap (fromMaybe 1 . go) $ lookupGetParam "p"
     where
         go :: Maybe Text -> Maybe Int
         go mp = readIntegral . T.unpack =<< mp
+
+showT :: (Show a) => a -> Text
+showT = T.pack . show
\ No newline at end of file
diff --git a/yesod-paginator.cabal b/yesod-paginator.cabal
index 347c175..6184606 100644
--- a/yesod-paginator.cabal
+++ b/yesod-paginator.cabal
@@ -1,5 +1,5 @@
 name:                yesod-paginator
-version:             0.2.3
+version:             0.3.0
 synopsis:            A pagination approach for yesod
 description:         Paginate a list showing a per-item widget and links to other pages
 homepage:            http://github.com/pbrisbin/yesod-paginator
